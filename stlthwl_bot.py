import telebot
from telebot import types
import config
import converter
import currency
import wether
import news
import datetime


token = config.token
bot = telebot.TeleBot(token)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', '–ü–æ–≥–æ–¥–∞')
    markup.row('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω', '–ù–æ–≤–æ—Å—Ç–∏')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –ø–æ–ª—å–∑—É—è—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∏–∂–µüëáüèª', reply_markup=markup)
    bot.register_next_step_handler(message, section_selection)


def section_selection(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard = types.InlineKeyboardMarkup()
    if message.text == '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç':
        markup.row('–û–±–º–µ–Ω–Ω–∏–∫')
        markup.row('–ù–∞–∑–∞–¥')
        try:
            usd = currency.Currency('usd')
            usd = usd.get_currency(currency.url_usd)
            eur = currency.Currency('eur')
            eur = eur.get_currency(currency.url_eur)
            btc = currency.Currency('btc')
            btc = btc.get_crypto(currency.url_btc)
            eth = currency.Currency('eth')
            eth = eth.get_crypto(currency.url_eth)
            bot.send_message(message.chat.id, f'USD: {usd} RUB', reply_markup=markup)
            bot.send_message(message.chat.id, f'EUR: {eur} RUB', reply_markup=markup)
            bot.send_message(message.chat.id, f'BTC: {btc} USD', reply_markup=markup)
            bot.send_message(message.chat.id, f'ETH: {eth} USD', reply_markup=markup)
            bot.register_next_step_handler(message, money_exchange_menu)
        except Exception:
            bot.send_message(message.chat.id, '—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n–ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ', reply_markup=markup)
            bot.register_next_step_handler(message, money_exchange)
    elif message.text == '–ü–æ–≥–æ–¥–∞' or message.text == '–ù–∞–∑–∞–¥':
        markup.row('–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')
        markup.row('–ö–∞–∑–∞–Ω—å', '–£—Ñ–∞')
        markup.row('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ü–µ—Ä–º—å')
        markup.row('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫')
        markup.row('–ù–∞–∑–∞–¥')
        bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞\n–∏–ª–∏ –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—ã–π', reply_markup=markup)
        bot.register_next_step_handler(message, get_weather)
    elif message.text == '–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω' or message.text == '–≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥':
        markup.row('–î–ª–∏–Ω–∞', '–ú–∞—Å—Å–∞')
        markup.row('–û–±—ä–µ–º', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
        markup.row('–ù–∞–∑–∞–¥')
        msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª?', reply_markup=markup)
        bot.register_next_step_handler(msg, converter_value)
    elif message.text == '–ù–æ–≤–æ—Å—Ç–∏':
        markup.row('–ù–∞–∑–∞–¥')
        try:
            n_l = news.News('news')
            n_l = n_l.get_news_line(news.url_news)
            bot.send_message(message.from_user.id, f'{n_l}', reply_markup=markup)
            link_btn = types.InlineKeyboardButton(text='–ø–æ–¥—Ä–æ–±–Ω–µ–µ',
                                                  url='https://lenta.ru/')
            keyboard.add(link_btn)
            bot.send_message(message.chat.id, '–∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ üëáüèª', reply_markup=keyboard)
            bot.register_next_step_handler(message, start)
        except Exception:
            bot.send_message(message.chat.id, '—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n–ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ')
            bot.register_next_step_handler(message, start)
    else:
        markup.row('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', '–ü–æ–≥–æ–¥–∞')
        markup.row('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω', '–ù–æ–≤–æ—Å—Ç–∏')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –ø–æ–ª—å–∑—É—è—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∏–∂–µüëáüèª', reply_markup=markup)
        bot.register_next_step_handler(message, section_selection)


def money_exchange_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if message.text == '–û–±–º–µ–Ω–Ω–∏–∫':
        markup.row('USD  ‚û°  RUB', 'RUB  ‚û°  USD')
        markup.row('USD  ‚û°  EUR', 'EUR  ‚û°  USD')
        markup.row('EUR  ‚û°  RUB', 'RUB  ‚û°  EUR')
        markup.row('–ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏ –ø–∞—Ä—É –¥–ª—è –æ–±–º–µ–Ω–∞', reply_markup=markup)
        bot.register_next_step_handler(message, money_exchange)
    else:
        markup.row('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', '–ü–æ–≥–æ–¥–∞')
        markup.row('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω', '–ù–æ–≤–æ—Å—Ç–∏')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –ø–æ–ª—å–∑—É—è—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∏–∂–µüëáüèª', reply_markup=markup)
        bot.register_next_step_handler(message, section_selection)


def money_exchange(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == 'USD  ‚û°  RUB':
        bot.send_message(message.chat.id, '–≤–≤–µ–¥–∏ —Å—É–º–º—É USD', reply_markup=markup)
        bot.register_next_step_handler(message, usd_in_rub)
    elif message.text == 'RUB  ‚û°  USD':
        bot.send_message(message.chat.id, '–≤–≤–µ–¥–∏ —Å—É–º–º—É RUB', reply_markup=markup)
        bot.register_next_step_handler(message, rub_in_usd)
    elif message.text == 'USD  ‚û°  EUR':
        bot.send_message(message.chat.id, '–≤–≤–µ–¥–∏ —Å—É–º–º—É USD', reply_markup=markup)
        bot.register_next_step_handler(message, usd_in_eur)
    elif message.text == 'EUR  ‚û°  USD':
        bot.send_message(message.chat.id, '–≤–≤–µ–¥–∏ —Å—É–º–º—É EUR', reply_markup=markup)
        bot.register_next_step_handler(message, eur_in_usd)
    elif message.text == 'EUR  ‚û°  RUB':
        bot.send_message(message.chat.id, '–≤–≤–µ–¥–∏ —Å—É–º–º—É EUR', reply_markup=markup)
        bot.register_next_step_handler(message, eur_in_rub)
    elif message.text == 'RUB  ‚û°  EUR':
        bot.send_message(message.chat.id, '–≤–≤–µ–¥–∏ —Å—É–º–º—É RUB', reply_markup=markup)
        bot.register_next_step_handler(message, rub_in_eur)
    else:
        markup.row('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', '–ü–æ–≥–æ–¥–∞')
        markup.row('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω', '–ù–æ–≤–æ—Å—Ç–∏')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –ø–æ–ª—å–∑—É—è—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∏–∂–µüëáüèª', reply_markup=markup)
        bot.register_next_step_handler(message, section_selection)


def usd_in_rub(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    usd = currency.Currency('usd')
    usd = usd.get_currency(currency.url_usd)
    markup.row('USD  ‚û°  RUB', 'RUB  ‚û°  USD')
    markup.row('USD  ‚û°  EUR', 'EUR  ‚û°  USD')
    markup.row('EUR  ‚û°  RUB', 'RUB  ‚û°  EUR')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        date = datetime.datetime.now()
        now = str(date.strftime("%d.%m.%Y %H:%M"))
        rub = round(float(message.text) * usd, 2)
        bot.send_message(message.chat.id, f'{now}\n{message.text} $ = {rub} ‚ÇΩ –ø–æ –∫—É—Ä—Å—É –¶–ë',
                         reply_markup=markup)
        bot.register_next_step_handler(message, money_exchange)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å\n–≤—ã–±–µ—Ä–∏ –ø–∞—Ä—É')
        bot.register_next_step_handler(message, money_exchange)


def rub_in_usd(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    usd = currency.Currency('usd')
    usd = usd.get_currency(currency.url_usd)
    markup.row('USD  ‚û°  RUB', 'RUB  ‚û°  USD')
    markup.row('USD  ‚û°  EUR', 'EUR  ‚û°  USD')
    markup.row('EUR  ‚û°  RUB', 'RUB  ‚û°  EUR')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        date = datetime.datetime.now()
        now = str(date.strftime("%d.%m.%Y %H:%M"))
        res = round(float(message.text) / usd, 2)
        bot.send_message(message.chat.id, f'{now}\n{message.text} ‚ÇΩ = {res} $ –ø–æ –∫—É—Ä—Å—É –¶–ë',
                         reply_markup=markup)
        bot.register_next_step_handler(message, money_exchange)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å\n–≤—ã–±–µ—Ä–∏ –ø–∞—Ä—É')
        bot.register_next_step_handler(message, money_exchange)


def usd_in_eur(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    eur = currency.Currency('eur')
    eur = eur.get_currency(currency.url_eur)
    usd = currency.Currency('usd')
    usd = usd.get_currency(currency.url_usd)
    markup.row('USD  ‚û°  RUB', 'RUB  ‚û°  USD')
    markup.row('USD  ‚û°  EUR', 'EUR  ‚û°  USD')
    markup.row('EUR  ‚û°  RUB', 'RUB  ‚û°  EUR')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        date = datetime.datetime.now()
        now = str(date.strftime("%d.%m.%Y %H:%M"))
        res = round(float(message.text) * (usd / eur), 2)
        bot.send_message(message.chat.id, f'{now}\n{message.text} $ = {res} ‚Ç¨ –ø–æ –∫—É—Ä—Å—É –¶–ë',
                         reply_markup=markup)
        bot.register_next_step_handler(message, money_exchange)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å\n–≤—ã–±–µ—Ä–∏ –ø–∞—Ä—É')
        bot.register_next_step_handler(message, money_exchange)


def eur_in_usd(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    eur = currency.Currency('eur')
    eur = eur.get_currency(currency.url_eur)
    usd = currency.Currency('usd')
    usd = usd.get_currency(currency.url_usd)
    markup.row('USD  ‚û°  RUB', 'RUB  ‚û°  USD')
    markup.row('USD  ‚û°  EUR', 'EUR  ‚û°  USD')
    markup.row('EUR  ‚û°  RUB', 'RUB  ‚û°  EUR')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        date = datetime.datetime.now()
        now = str(date.strftime("%d.%m.%Y %H:%M"))
        res = round(float(message.text) * (eur / usd), 2)
        bot.send_message(message.chat.id, f'{now}\n{message.text} ‚Ç¨ = {res} $ –ø–æ –∫—É—Ä—Å—É –¶–ë',
                         reply_markup=markup)
        bot.register_next_step_handler(message, money_exchange)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å\n–≤—ã–±–µ—Ä–∏ –ø–∞—Ä—É')
        bot.register_next_step_handler(message, money_exchange)


def eur_in_rub(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    eur = currency.Currency('eur')
    eur = eur.get_currency(currency.url_eur)
    markup.row('USD  ‚û°  RUB', 'RUB  ‚û°  USD')
    markup.row('USD  ‚û°  EUR', 'EUR  ‚û°  USD')
    markup.row('EUR  ‚û°  RUB', 'RUB  ‚û°  EUR')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        date = datetime.datetime.now()
        now = str(date.strftime("%d.%m.%Y %H:%M"))
        res = round(float(message.text) * eur, 2)
        bot.send_message(message.chat.id, f'{now}\n{message.text} ‚Ç¨ = {res} ‚ÇΩ –ø–æ –∫—É—Ä—Å—É –¶–ë',
                         reply_markup=markup)
        bot.register_next_step_handler(message, money_exchange)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å\n–≤—ã–±–µ—Ä–∏ –ø–∞—Ä—É')
        bot.register_next_step_handler(message, money_exchange)


def rub_in_eur(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    eur = currency.Currency('eur')
    eur = eur.get_currency(currency.url_eur)
    markup.row('USD  ‚û°  RUB', 'RUB  ‚û°  USD')
    markup.row('USD  ‚û°  EUR', 'EUR  ‚û°  USD')
    markup.row('EUR  ‚û°  RUB', 'RUB  ‚û°  EUR')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        date = datetime.datetime.now()
        now = str(date.strftime("%d.%m.%Y %H:%M"))
        res = round(float(message.text) / eur, 2)
        bot.send_message(message.chat.id, f'{now}\n{message.text} ‚ÇΩ = {res} ‚Ç¨ –ø–æ –∫—É—Ä—Å—É –¶–ë',
                         reply_markup=markup)
        bot.register_next_step_handler(message, money_exchange)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å\n–≤—ã–±–µ—Ä–∏ –ø–∞—Ä—É')
        bot.register_next_step_handler(message, money_exchange)


def get_weather(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row('–ù–∞–∑–∞–¥')
        get_city = message.text
        openweater_token = config.api_openweather_key
        city = wether.Get_Weather(get_city)
        city = city.get_any_city(get_city, openweater_token)
        bot.send_message(message.chat.id, f'{city}', reply_markup=markup)
        bot.register_next_step_handler(message, section_selection)
    except Exception:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', '–ü–æ–≥–æ–¥–∞')
        markup.row('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω', '–ù–æ–≤–æ—Å—Ç–∏')
        bot.send_message(message.chat.id, '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –ø–æ–ª—å–∑—É—è—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∏–∂–µüëáüèª', reply_markup=markup)
        bot.register_next_step_handler(message, section_selection)


def converter_value(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    if message.text == '–î–ª–∏–Ω–∞':
        markup.row('–∫–∏–ª–æ–º–µ—Ç—Ä—ã –≤ –º–∏–ª–∏')
        markup.row('–º–µ—Ç—Ä—ã –≤ —Ñ—É—Ç—ã')
        markup.row('—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã –≤ –¥—é–π–º—ã')
        bot.send_message(message.chat.id, '—á—Ç–æ –±—É–¥–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(message, length)
    elif message.text == '–ú–∞—Å—Å–∞':
        markup.row('–∫–∏–ª–æ–≥—Ä–∞–º–º—ã –≤ —Ñ—É–Ω—Ç—ã')
        markup.row('–≥—Ä–∞–º–º—ã –≤ —É–Ω—Ü–∏–∏')
        bot.send_message(message.chat.id, '—á—Ç–æ –±—É–¥–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(message, weight)
    elif message.text == '–û–±—ä–µ–º':
        markup.row('–ª–∏—Ç—Ä—ã –≤ –≥–∞–ª–æ–Ω—ã')
        bot.send_message(message.chat.id, '—á—Ç–æ –±—É–¥–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(message, volume)
    elif message.text == '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞':
        markup.row('¬∞C -> F')
        markup.row('¬∞C -> K')
        bot.send_message(message.chat.id, '—á—Ç–æ –±—É–¥–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=markup)
        bot.register_next_step_handler(message, temperature)
    else:
        markup.row('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', '–ü–æ–≥–æ–¥–∞')
        markup.row('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω', '–ù–æ–≤–æ—Å—Ç–∏')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –ø–æ–ª—å–∑—É—è—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∏–∂–µüëáüèª', reply_markup=markup)
        bot.register_next_step_handler(message, section_selection)


def length(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == '–∫–∏–ª–æ–º–µ—Ç—Ä—ã –≤ –º–∏–ª–∏':
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ –∫–∏–ª–æ–º–µ—Ç—Ä—ã')
        bot.register_next_step_handler(message, calc_mile)
    elif message.text == '–º–µ—Ç—Ä—ã –≤ —Ñ—É—Ç—ã':
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ –º–µ—Ç—Ä—ã')
        bot.register_next_step_handler(message, calc_feet)
    elif message.text == '—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã –≤ –¥—é–π–º—ã':
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä—ã')
        bot.register_next_step_handler(message, calc_inch)
    else:
        markup.row('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', '–ü–æ–≥–æ–¥–∞')
        markup.row('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω', '–ù–æ–≤–æ—Å—Ç–∏')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –ø–æ–ª—å–∑—É—è—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∏–∂–µüëáüèª', reply_markup=markup)
        bot.register_next_step_handler(message, section_selection)


def weight(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == '–∫–∏–ª–æ–≥—Ä–∞–º–º—ã –≤ —Ñ—É–Ω—Ç—ã':
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã')
        bot.register_next_step_handler(message, calc_lb)
    elif message.text == '–≥—Ä–∞–º–º—ã –≤ —É–Ω—Ü–∏–∏':
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ –≥—Ä–∞–º–º—ã')
        bot.register_next_step_handler(message, calc_oz)
    else:
        markup.row('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', '–ü–æ–≥–æ–¥–∞')
        markup.row('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω', '–ù–æ–≤–æ—Å—Ç–∏')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –ø–æ–ª—å–∑—É—è—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∏–∂–µüëáüèª', reply_markup=markup)
        bot.register_next_step_handler(message, section_selection)


def volume(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == '–ª–∏—Ç—Ä—ã –≤ –≥–∞–ª–æ–Ω—ã':
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ –ª–∏—Ç—Ä—ã')
        bot.register_next_step_handler(message, calc_gal)
    else:
        markup.row('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', '–ü–æ–≥–æ–¥–∞')
        markup.row('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω', '–ù–æ–≤–æ—Å—Ç–∏')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –ø–æ–ª—å–∑—É—è—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∏–∂–µüëáüèª', reply_markup=markup)
        bot.register_next_step_handler(message, section_selection)


def temperature(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.text == '¬∞C -> F':
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ –≥—Ä–∞–¥—É—Å—ã')
        bot.register_next_step_handler(message, calc_f)
    elif message.text == '¬∞C -> K':
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ –≥—Ä–∞–¥—É—Å—ã')
        bot.register_next_step_handler(message, calc_k)
    else:
        markup.row('–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç', '–ü–æ–≥–æ–¥–∞')
        markup.row('–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–µ–ª–∏—á–∏–Ω', '–ù–æ–≤–æ—Å—Ç–∏')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª, –ø–æ–ª—å–∑—É—è—Å—å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –Ω–∏–∂–µüëáüèª', reply_markup=markup)
        bot.register_next_step_handler(message, section_selection)


def calc_mile(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–î–ª–∏–Ω–∞', '–ú–∞—Å—Å–∞')
    markup.row('–û–±—ä–µ–º', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        mile = converter.Length('mile')
        mile = mile.km_in_mile(message.text)
        bot.send_message(message.chat.id, f'{message.text} –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ - —ç—Ç–æ {mile} –º–∏–ª—å', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=markup)
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ —Ü–∏—Ñ—Ä—ã', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)


def calc_feet(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–î–ª–∏–Ω–∞', '–ú–∞—Å—Å–∞')
    markup.row('–û–±—ä–µ–º', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        feet = converter.Length('feet')
        feet = feet.m_in_feet(message.text)
        bot.send_message(message.chat.id, f'{message.text} –º–µ—Ç—Ä–æ–≤ - —ç—Ç–æ {feet} —Ñ—É—Ç–æ–≤', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=markup)
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ —Ü–∏—Ñ—Ä—ã', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)


def calc_inch(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–î–ª–∏–Ω–∞', '–ú–∞—Å—Å–∞')
    markup.row('–û–±—ä–µ–º', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        inch = converter.Length('inch')
        inch = inch.cm_in_inch(message.text)
        bot.send_message(message.chat.id, f'{message.text} —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–æ–≤ - —ç—Ç–æ {inch} –¥—é–π–º–æ–≤', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=markup)
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ —Ü–∏—Ñ—Ä—ã', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)


def calc_lb(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–î–ª–∏–Ω–∞', '–ú–∞—Å—Å–∞')
    markup.row('–û–±—ä–µ–º', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        lb = converter.Weight('lb')
        lb = lb.kg_in_lb(message.text)
        bot.send_message(message.chat.id, f'{message.text} –∫–∏–ª–æ–≥—Ä–∞–º–º - —ç—Ç–æ {lb} —Ñ—É–Ω—Ç–æ–≤', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=markup)
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ —Ü–∏—Ñ—Ä—ã', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)


def calc_oz(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–î–ª–∏–Ω–∞', '–ú–∞—Å—Å–∞')
    markup.row('–û–±—ä–µ–º', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        oz = converter.Weight('oz')
        oz = oz.gm_in_oz(message.text)
        bot.send_message(message.chat.id, f'{message.text} –≥—Ä–∞–º–º - —ç—Ç–æ {oz} —É–Ω—Ü–∏–π', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=markup)
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ —Ü–∏—Ñ—Ä—ã', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)


def calc_gal(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–î–ª–∏–Ω–∞', '–ú–∞—Å—Å–∞')
    markup.row('–û–±—ä–µ–º', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        gal = converter.Volume('gal')
        gal = gal.l_in_gal(message.text)
        bot.send_message(message.chat.id, f'{message.text} –ª - —ç—Ç–æ {gal} –≥', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=markup)
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ —Ü–∏—Ñ—Ä—ã', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)


def calc_f(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–î–ª–∏–Ω–∞', '–ú–∞—Å—Å–∞')
    markup.row('–û–±—ä–µ–º', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        f = converter.Temperature('f')
        f = f.c_in_f(message.text)
        bot.send_message(message.chat.id, f'{message.text} ¬∞C - —ç—Ç–æ {f} F', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=markup)
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ —Ü–∏—Ñ—Ä—ã', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)


def calc_k(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–î–ª–∏–Ω–∞', '–ú–∞—Å—Å–∞')
    markup.row('–û–±—ä–µ–º', '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞')
    markup.row('–ù–∞–∑–∞–¥')
    try:
        k = converter.Temperature('k')
        k = k.c_in_k(message.text)
        bot.send_message(message.chat.id, f'{message.text} ¬∞C - —ç—Ç–æ {k} K', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)
    except ValueError:
        bot.send_message(message.chat.id, '—ç—Ç–æ –Ω–µ–ª—å–∑—è –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=markup)
        bot.send_message(message.chat.id, '–≤–≤–æ–¥–∏ —Ü–∏—Ñ—Ä—ã', reply_markup=markup)
        bot.register_next_step_handler(message, converter_value)


bot.polling(none_stop=True)
